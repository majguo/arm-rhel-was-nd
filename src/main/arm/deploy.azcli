#!/bin/bash

#      Copyright (c) Microsoft Corporation.
# 
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
# 
#           http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

set -euo pipefail
IFS=$'\n\t'

# -e: immediately exit if any command has a non-zero exit status
# -o: prevents errors in a pipeline from being masked
# IFS new value is less likely to cause confusing bugs when looping arrays or arguments (e.g. $@)

usage() { echo "Usage: $0 -n <deploymentName> -i <subscriptionId> -g <resourceGroupName> -l <resourceGroupLocation>" 1>&2; exit 1; }

declare deploymentName=""
declare subscriptionId=""
declare resourceGroupName=""
declare resourceGroupLocation=""

# Initialize parameters specified from command line
while getopts ":n:f:i:g:l:" arg; do
	case "${arg}" in
		n)
			deploymentName=${OPTARG}
			;;
		i)
			subscriptionId=${OPTARG}
			;;
		g)
			resourceGroupName=${OPTARG}
			;;
		l)
			resourceGroupLocation=${OPTARG}
			;;
		esac
done
shift $((OPTIND-1))

#Prompt for parameters is some required parameters are missing
if [[ -z "$deploymentName" ]]; then
	echo "Enter a name for this deployment:"
	read deploymentName
fi

if [[ -z "$subscriptionId" ]]; then
	echo "Your subscription ID can be looked up with the CLI using: az account show --out json "
	echo "Enter your subscription ID:"
	read subscriptionId
	[[ "${subscriptionId:?}" ]]
fi

if [[ -z "$resourceGroupName" ]]; then
	echo "This script will look for an existing resource group, otherwise a new one will be created "
	echo "You can create new resource groups with the CLI using: az group create "
	echo "Enter a resource group name"
	read resourceGroupName
	[[ "${resourceGroupName:?}" ]]
fi

if [[ -z "$resourceGroupLocation" ]]; then
	echo "If creating a *new* resource group, you need to set a location "
	echo "You can lookup locations with the CLI using: az account list-locations "
	
	echo "Enter resource group location:"
	read resourceGroupLocation
fi

if [ -z "$deploymentName" ] || [ -z "$subscriptionId" ] || [ -z "$resourceGroupName" ]; then
	echo "Either one of deploymentName, subscriptionId and resourceGroupName is empty"
	usage
fi

#templateFile Path - template file to be used
templateFilePath="./mainTemplate.json"

if [ ! -f "$templateFilePath" ]; then
	echo "$templateFilePath not found"
	exit 1
fi

#parameter file path
parametersFilePath="./parameters.json"

if [ ! -f "$parametersFilePath" ]; then
	echo "$parametersFilePath not found"
	exit 1
fi

#login to azure using your credentials
az account show 1> /dev/null

if [ $? != 0 ]; then
	az login
fi

#set the default subscription id
az account set --subscription $subscriptionId

set +e

#Check for existing RG
az group show --name $resourceGroupName 1> /dev/null

if [ $? != 0 ]; then
	echo "Resource group with name" $resourceGroupName "could not be found. Creating new resource group.."
	set -e
	(
		set -x
		az group create --name $resourceGroupName --location $resourceGroupLocation 1> /dev/null
	)
	else
	echo "Using existing resource group..."
fi
resourceGroupLocation=$( az group show --name $resourceGroupName | jq -r '.location' )

#parameters JSON
parametersJson=$( cat $parametersFilePath | jq '.parameters' )
connectToDB2Server=$( echo $parametersJson | jq '.connectToDB2Server.value' | sed 's/"//g' )
parametersJson=$( echo $parametersJson | jq --argjson connect "$connectToDB2Server" '.connectToDB2Server.value = $connect' )
connectToELK=$( echo $parametersJson | jq '.connectToELK.value' | sed 's/"//g' )
parametersJson=$( echo $parametersJson | jq --argjson elk "$connectToELK" '.connectToELK.value = $elk' )
parametersJson=$( echo "$parametersJson" | jq -c '.' )

#Start deployment
echo "Starting deployment..."
(
	az deployment group create --name "$deploymentName" --resource-group "$resourceGroupName" \
		--template-file "$templateFilePath" --parameters "$parametersJson"
)

if [[ $? -eq 0 ]]; then
	echo "Template has been successfully deployed"
fi
